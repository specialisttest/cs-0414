Лабораторная 1
1. Определите версию dotnet на своём ПК. 
Если надо, то установите dotnet  sdk 9 (для C#13) или dotnet sdk 8 (для C#12)
dotnet --list--sdks
2. Создать приложение используя dotnet CLI
dotnet new console
3. Открыть приложение в VS Code (code .)
4. Выполните компиляцию консольного приложения. Запустите его.
dotnet build
dotnet run
При возникновении ошибок запуска добавить в файл проекта (csproj)
параметр <CETCompat>false</CETCompat> (для .net 9)
5. Создать консольное приложение в Visual Studio и запустить его

Лабораторная 2

1. Создайте новое консольное приложение.
2. Создайте перечисление с именами(типами) 3-5 плоских геометрических объекты.
(Point, Circle, Line)
2. Создайте структуры соотвествующих геометрических объектов описав в каждой 
из структур характеристики этих обхектов
3. Создайте для каждой структуры конструктор и реализуйте метод преобразования
в строку
4. Создайте, инициализируйте и распечатайте одну из фигур в коде.

Лабораторная 3.1
1. Пользователь вводит число ворон на ветке (0..9)
2. Программа должна вывести сообщение 
"На ветке 5 ворон", правильно определив падеж слова 
"ворона"
3. Дополнить программу, чтобы она работала для любого 
числа >= 0

Лабораторная 3.2
1. Вывести числа Фибоначчи < 1000
1 1 2 3 5 8 13 21 ... 

Лабораторная 3.3
1. Создать метод, который решает квадратное уравнение
a*x^2 + b*x + c = 0
который возвращает четыре значения (в виде кортежа)
X1, X2, HasRoots, IsSingleRoot
2. Написать программу, которая тестирует этот метод.
d = b*b - 4*a*c
d < 0 нет корней
d == 0 x = -b / (2*a)
d > 0 x1 = (-b + Math.Sqrt(d))/(2*a) x2 = (-b - Math.Sqrt(d))/(2*a)

Лабораторная 4
1. Используя массив параметров командной строки (string[] args) метода Main
извлечь все параметры, преобразовав их в массив чисел.
2. Если параметр не число, вывести его с информацией об ошибке
3. Сложить все числа (параметры) и вывести результат на экран
4. Отсортировать массив чисел и вывести на экран

Лабораторная 5
1. Создать несколько классов для описания графических фигур:
Point, Line, Circle
2. В этих классах сделать необходимы свойства и конструкторы
Point: int X,Y
Line : int X1,Y1, X2,Y2
Circle int X,Y Radius
3. Реализовать в каждом классе метод Draw() (вывести в консоль 
информацию об объекте)
4. Реализовать метод MoveBy() для всех классов. Метод Scale(double) 
для класса Circle.
5. В классе Circle с помощью инкапсуляции сделать так чтобы
Radius всегда был > 0
6. Проверить работу классов, создав в программе объекты этих классов.

Лабораторная 6
Описать графическую сцену, состояющую из разнотипных графических фигур 
(в виде массив)
1. Создать абстрактный класс Shape. Сделать там свойство string Color,
абстрактная Draw(), конструктор.
2. Сделать классы Point, Line, Circle наследниками Shape, реализовав в них
метод Draw и правильно вызвать конструктор родителя.
3. В программе создать массив графических фигур Shape[], добавив в него 
разнотипный фигуры.
4. Сделать метод DrawScene(Shape[]), который в цикле перебирает графические
фигуры и для каждой фигуры вызовет полиморфный метод Draw();

Лабораторная работа 7
1. Вывести спсок типов текущей сборки
2. Для каждого типа вывести список полей,
свойств и методов (с отступом в \t)

Лабораторная 8
1. Написать метод factorial(int n) 
n! = 1 * 2 * 3 ...n
3! = 1*2*3 = 6
4! = 1*2*3 = 24
0! = 1
2. Выяснить для какого максимального int можно вычислить эту функцию
(включив режим checked b поймав OverflowException)
3*. Реализовать метод factorial(int n) используя BigInteger

Лабораторная 9
1. Используем классы Point, Circle, Shape, IScaleable
2. Создать класс Scene, в который перенести массив Shape[],
методы DrawScene, Scale
3. Реализовать в классе Scene интерфейс IEnumerable, 
использую в методе GetEnumerator yield return для возврата
множества графических объектов.

Лабораторная 10
1. Использовать классы Point, Circle, Shape, Scene из пердыдущих проектов
2. Сделать метод сохранения сцены в формате JSON используя библиотеку Newtonsoft.JSON
3*. Сделать метод загрузки сцены из формата JSON


Лабораторная 11
1. Переделать класс Scene из предыдущих примеров на хранения набора
графических фигур в виде коллекции (List<Shape>).
2. Добавить методы Add(Shape shape) и Clear() классу Scene

Лабораторная 12
1. Правильно перегрузить операцию сравнения 
для класса Circle
(== !=, реализовать Equals, GetHashCode)

Лабораторная 13
1. Добавить в класс Circle событие, которое будет возникать
при изменении Radius: создать свой тип делегата (или использовать
Action<Circle sender, int, int>), добавить поле типа делегат event OnRadiusChanged,
сгенерировать это событие в set свойства Radius
2. В программе подписаться на событие OnRadiusChanged анонимным 
делегатом или лямбда выражением, которые перерисуют Circle метод Draw











